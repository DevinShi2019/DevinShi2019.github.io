{"meta":{"title":"DevinShi2019","subtitle":" ","description":"","author":"Devin Shi","url":"https://shiyutian.com"},"pages":[{"title":"404","date":"2021-05-28T02:03:41.000Z","updated":"2021-05-28T04:55:59.314Z","comments":true,"path":"404/index.html","permalink":"https://shiyutian.com/404/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"关于","date":"2021-05-28T04:55:59.314Z","updated":"2021-05-28T04:55:59.314Z","comments":false,"path":"about/index.html","permalink":"https://shiyutian.com/about/index.html","excerpt":"","text":"个人详细介绍","raw":null,"content":null},{"title":"书单","date":"2021-05-28T04:55:59.314Z","updated":"2021-05-28T04:55:59.314Z","comments":false,"path":"books/index.html","permalink":"https://shiyutian.com/books/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"分类","date":"2019-11-25T02:10:43.000Z","updated":"2021-05-28T04:55:59.314Z","comments":true,"path":"categories/index.html","permalink":"https://shiyutian.com/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"contact","date":"2021-05-28T02:03:20.000Z","updated":"2021-05-28T04:55:59.314Z","comments":true,"path":"contact/index.html","permalink":"https://shiyutian.com/contact/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"friends","date":"2021-05-28T02:03:34.000Z","updated":"2021-05-28T04:55:59.314Z","comments":true,"path":"friends/index.html","permalink":"https://shiyutian.com/friends/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"友情链接","date":"2021-05-28T04:55:59.314Z","updated":"2021-05-28T04:55:59.314Z","comments":true,"path":"links/index.html","permalink":"https://shiyutian.com/links/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"项目","date":"2019-11-25T02:13:45.000Z","updated":"2021-05-28T04:55:59.314Z","comments":false,"path":"repository/index.html","permalink":"https://shiyutian.com/repository/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"标签","date":"2019-11-25T02:10:54.000Z","updated":"2021-05-28T04:55:59.314Z","comments":true,"path":"tags/index.html","permalink":"https://shiyutian.com/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"Hexo博客系列-4：使用Github Action将语雀文档同步到blog","slug":"yuque/Hexo博客系列-4：使用Github Action将语雀文档同步到blog","date":"2021-05-27T14:01:00.000Z","updated":"2021-05-28T04:56:17.074Z","comments":true,"path":"2021/05/27/yuque/Hexo博客系列-4：使用Github Action将语雀文档同步到blog/","link":"","permalink":"https://shiyutian.com/2021/05/27/yuque/Hexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97-4%EF%BC%9A%E4%BD%BF%E7%94%A8Github%20Action%E5%B0%86%E8%AF%AD%E9%9B%80%E6%96%87%E6%A1%A3%E5%90%8C%E6%AD%A5%E5%88%B0blog/","excerpt":"","text":"具体流程 Hexo 博客搭建好，将源码上传到 Github 在 Github 中开启 Github Actions 服务，配置 yaml 格式的 deploy 脚本 编写 serverless 函数 ，测试可以触发 Github Actions，获取触发地址 在语雀中创建知识库并发布一篇文章，必须发布过文章，因为 yuque-hexo 会删除 _posts 文件夹 配置语雀的 webhook，使其可调用 serverless 函数 触发 Github Actions 实现 Hexo 的自动部署，生成静态文件并发布 使用 Github + Hexo Hexo 博客系列-1：搭建 GithubPages + Hexo 博客 在 Github 中使用 Github Actions 在 Hexo 源码仓库的页面选择Actions -&gt; Set up a workflow yourself，进行网页编写 在本地环境根目录创建.github/workflows文件夹，里面放写好的 yaml 脚本 具体脚本如下: # workflow namename: Deploy To Github Pages# 当有 push 到仓库和外部触发的时候就运行on: [push, workflow_dispatch]# YUQUE_TOKEN# GITHUB_PERSONAL_API_TOKENjobs: deploy: name: Deploy Hexo Public To Pages runs-on: ubuntu-latest env: TZ: Asia/Shanghai steps: # check it to your workflow can access it # from: https://github.com/actions/checkout - name: Checkout Repository master branch uses: actions/checkout@master # from: https://github.com/actions/setup-node - name: Setup Node.js 10.x uses: actions/setup-node@master with: node-version: &quot;10.x&quot; # from https://github.com/x-cold/yuque-hexo - name: Setup Hexo Dependencies and Generate Public Files env: YUQUE_TOKEN: $&#123;&#123; secrets.YUQUE_TOKEN &#125;&#125; run: | npm install hexo-cli -g npm install yuque-hexo -g npm install npm run start # from https://github.com/peaceiris/actions-gh-pages - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: $&#123;&#123; secrets.GITHUB_PERSONAL_API_TOKEN &#125;&#125; external_repository: 用户名/仓库 publish_branch: master publish_dir: ./public commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125; ​ YUQUE_TOKEN 配置 在语雀中新建 Token，并添加此 Token 到 Hexo 源码仓库Setting -&gt; Secrets中添加变量 key 为 YUQUE_TOKEN ，值为实际的 token 值 GITHUB_PERSONAL_API_TOKEN 配置 Github 同理，点击 GitHub 用户设置页面 最下方的 Developer setting ，然后选择 Personal access tokens 来生成一个 token。然后添加到Secrets中即可 ​ 配置腾讯云函数 配置腾讯云函数登录腾讯云，搜索云函数，创建此处以 Python2.7 为例 详细代码如下 # -*- coding: utf8 -*-import requestsdef main_handler(event, context): r = requests.post(&quot;https://api.github.com/repos/$&#123;&#123;GithubUserName&#125;&#125;/$&#123;&#123;GithubRepo&#125;&#125;/actions/workflows/$&#123;&#123;workflowId&#125;&#125;/dispatches&quot;, json = &#123;&quot;ref&quot;:&quot;master&quot;&#125;, headers = &#123;&quot;User-Agent&quot;:&#x27;curl/7.52.1&#x27;, &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;Accept&#x27;: &#x27;application/vnd.github.v3+json&#x27;, &#x27;Authorization&#x27;: &#x27;token $&#123;&#123;替换为你的githubToken&#125;&#125;&#x27;&#125;) if r.status_code == 204: return &quot;This&#x27;s OK!&quot; else: return r.status_code 如果不知道具体的 workflowId，可以在调用此接口获取 url: https://api.github.com/repos/$&#123;&#123;GithubUserName&#125;&#125;/$&#123;&#123;GithubRepo&#125;&#125;/actions/workflowsmethod: getheaders: &#123;&quot;User-Agent&quot;:&#x27;curl/7.52.1&#x27;, &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;Accept&#x27;: &#x27;application/vnd.github.v3+json&#x27;, &#x27;Authorization&#x27;: &#x27;token $&#123;&#123;替换为你的githubToken&#125;&#125;&#x27;&#125; 创建云函数触发器 选择 API 网关触发即可，生成触发器之后，通过触发器 URL 直接访问，即可调用云函数 ​ 语雀配置 注册，登录创建知识库–&gt;文档知识库–&gt;可见范围为互联网可见 工作台–&gt;知识库–&gt;找到新创建的知识库，管理–&gt;设置–&gt;路径进行自定义，后面有用 工作台–&gt;知识库–&gt;找到新创建的知识库，管理–&gt;设置–&gt;开发者–&gt;名称任意。URL 为云函数的地址，即上面获取到的访问路径 安装 yuque-hexo npm install yuque-hexo --save 编辑 package.json 文件，添加以下内容 ​ Npm Scripts “start” 和 yuqueConfig，将操作命令合并为一个脚本，只需要执行 npm run start 即可完成语雀的同步和 Hexo 的清理和静态文件生成，yueque 记得要用最新版本 &#123; ... &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;yuque-hexo clean &amp;&amp; yuque-hexo sync &amp;&amp; hexo clean &amp;&amp; hexo generate&quot;, &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;server&quot;: &quot;hexo server&quot; &#125;, ... &quot;yuqueConfig&quot;: &#123; &quot;baseUrl&quot;: &quot;https://www.yuque.com/api/v2&quot;, &quot;login&quot;: &quot;语雀个人路径&quot;, &quot;repo&quot;: &quot;知识库名称&quot;, &quot;mdNameFormat&quot;: &quot;title&quot;, &quot;postPath&quot;: &quot;source/_posts&quot;, &quot;onlyPublished&quot;: false &#125;&#125; PS: 本文参考https://www.zhwei.cn/hexo-github-actions-yuque/，对最新的配置做了些优化","raw":null,"content":null,"categories":[{"name":"博客","slug":"博客","permalink":"https://shiyutian.com/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"https://shiyutian.com/tags/Hexo%E7%B3%BB%E5%88%97/"},{"name":"教程","slug":"教程","permalink":"https://shiyutian.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Hexo博客系列-3：使用主题pure","slug":"yuque/Hexo博客系列-3：使用主题pure","date":"2019-11-29T03:20:00.000Z","updated":"2021-05-28T04:56:17.198Z","comments":true,"path":"2019/11/29/yuque/Hexo博客系列-3：使用主题pure/","link":"","permalink":"https://shiyutian.com/2019/11/29/yuque/Hexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97-3%EF%BC%9A%E4%BD%BF%E7%94%A8%E4%B8%BB%E9%A2%98pure/","excerpt":"","text":"特色 多语言 第三方评论框（友言、来必力、gitment、gitalk） 可展示个人豆瓣书单 可展示个人 github 托管项目 可设置支付宝、微信打赏 配置说明 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为站点配置文件， 后者称为主题配置文件 安装主题 git clone https://github.com/cofess/hexo-theme-pure.git themes/purecd themes/purerm -rf .git 启用 pure 主题 打开站点配置文件，找到 theme 字段，将其值更改为 pure theme: pure 到此，主题安装完成。然后启动 Hexo 服务验证主题是否正确启用。 hexo s 安装插件 hexo-wordcount npm install hexo-wordcount --save hexo-generator-json-content npm install hexo-generator-json-content --save hexo-generator-feed npm install hexo-generator-feed --save hexo-generator-sitemap npm install hexo-generator-sitemap --save hexo-generator-baidu-sitemap npm install hexo-generator-baidu-sitemap --save 主题配置 设置语言 打开站点配置文件, 将 language 设置成你所需要的语言。建议明确设置你所需要的语言,可选值对应 themes\\pure\\languages 目录下语言文件，简体中文配置如下： language: zh-CN 主题颜色 定制了五套颜色，默认白，黑:theme-black，蓝:theme-blue，绿:theme-green，紫:theme-purple # configconfig: skin: # 主题颜色 theme-black theme-blue theme-green theme-purple 导航菜单 # 导航菜单menu: Home: . Archives: archives # 归档 Categories: categories # 分类 Tags: tags # 标签 Repository: repository # github repositories Books: books # 书单 Links: links # 友链 About: about # 关于# 导航菜单图标（font awesome）menu_icons: enable: true # 是否启用菜单图标 home: icon-home-fill archives: icon-archives-fill categories: icon-folder tags: icon-tags repository: icon-project books: icon-book-fill links: icon-friendship about: icon-cup-fill 设置个人信息 头像在 themes\\pure\\source\\images 目录下替换图片即可，捐献的二维码同理。 个人信息大部分都在 主题配置文件 中设置 搜索 主题内置三种站内搜索方式：insight、swiftype、baidu # Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search 分享 支持weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedin # Share# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare: enable: true # 是否启用分享 sites: weibo,qq,wechat,facebook,twitter # PC端显示的分享图标 mobile_sites: weibo,qq,qzone # 移动端显示的分享图标 评论 主题集成了disqus、友言、来必力、gitment、gitalk、valine评论系统，选择其中一种即可 本文中选择 valine 主题，简洁大方 comment: type: valine # 启用哪种评论系统 valine: # Valine. https://valine.js.org appid: # your leancloud application appid appkey: # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 每一份发言都值得被记录 # comment box placeholder avatar: mm # gravatar style meta: nick,mail,link # custom comment header pageSize: 10 # pagination size visitor: false # Article reading statistic https://valine.js.org/visitor.html 文章浏览量统计 主题内置了不蒜子和 leancloud 来统计文章浏览量，启用其中之一即可，注意 leancloud 需要到其官网申请 APP ID 和 APP Key。 比如，启用不蒜子来统计文章浏览量，在主题配置文件中把 busuanzi 设置为 true 即可： pv: busuanzi: enable: true # 不蒜子统计 如果不需要第三方来统计浏览量，只需将相应设置改为 false 即可（设置为 false 后不会加载第三方 JS 脚本） Github respostory 复制theme/pure/_source/ 目录下repository文件夹到blog path/source/ 目录下 # Githubgithub: username: *** # github username 豆瓣书单 复制theme/pure/_source/ 目录下books文件夹到blog path/source/ 目录下 # douban 豆瓣书单douban: user: *** # 豆瓣用户名 start: 0 # 从哪一条记录开始 count: 100 # 获取豆瓣书单数据条数 友情链接 复制theme/pure/_source/ 目录下links文件夹到blog path/source/ 目录下 在 hexo 目录下的 source 文件夹内创建一个名为 _data（禁止改名）的文件夹。 然后在文件内创建一个名为 links.yml 的文件,在其中添加相关数据即可。 单个友情链接的格式为： Name: link: http://example.com avatar: http://example.com/avatar.png desc: &quot;这是一个描述&quot; 添加多个友情链接，我们只需要根据上面的格式重复填写即可。 . 将 Name 改为友情链接的名字，例如 Cofess。 . http://example.com 为友情链接的地址。 . http://example.com/avatar.png 为友情链接的头像。 . 这是一个描述 为友情链接描述。 文章索引目录 title: 文章标题categories: - 文章分类tags: - 文章标签toc: true # 是否启用内容索引 sidebar 侧边栏 文章侧边栏默认为开启状态，如果某篇文章不想开启侧边栏，在文章开头配置加入“sidebar: none”即可： title: 文章标题categories: - 文章分类tags: - 文章标签sidebar: none # 是否启用sidebar侧边栏，none：不启用 博客优化 hexo-neat auto Minify html、js、css and make it neat npm install hexo-neat --save 在博客配置文件_config.yml中添加 # hexo-neatneat_enable: trueneat_html: enable: true exclude:neat_css: enable: true exclude: - &#x27;*.min.css&#x27;neat_js: enable: true mangle: true output: compress: exclude: - &#x27;*.min.js&#x27; hexo-baidu-url-submit npm install hexo-baidu-url-submit --save hexo-translate-title 使用 Google 翻译，百度翻译和有道翻译将 Hexo 中的汉字标题转成英文标题 安装 npm install hexo-translate-title --save 在博客配置文件_config.yml中添加 translate_title: translate_way: google #google | baidu | youdao youdao_api_key: XXX youdao_keyfrom: XXX is_need_proxy: true #true | false proxy_url: http://localhost:8123 注意：判断是否需要配置 google 本地代理，因为我在本地是开启时才能访问 google 翻译的，如果没有被墙，请将_config.yml 下的is_need_proxy: true改为 false。如果设置为 true,请设置本地代理地址 数学公式 Hexo 默认使用&quot;hexo-renderer-marked&quot;引擎渲染网页，该引擎会把一些特殊的 markdown 符号转换为相应的 html 标签 解决方案 解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的方法。 更换 Hexo 的 markdown 渲染引擎，hexo-renderer-markdown-it-plus引擎替换默认的渲染引擎hexo-renderer-marked即可。 安装 hexo-renderer-markdown-it-plus 插件 npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save 配置 安装插件后，如果未正常渲染 LaTeX 数学公式，在博客配置文件_config.yml中添加 markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: - plugin: name: markdown-it-katex enable: true - plugin: name: markdown-it-mark enable: false 文章启用 mathjax title: Hello Worldmathjax: true","raw":null,"content":null,"categories":[{"name":"博客","slug":"博客","permalink":"https://shiyutian.com/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"https://shiyutian.com/tags/Hexo%E7%B3%BB%E5%88%97/"},{"name":"教程","slug":"教程","permalink":"https://shiyutian.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Hexo博客系列-1：搭建GithubPages + Hexo博客","slug":"yuque/Hexo博客系列-1：搭建GithubPages + Hexo博客","date":"2019-11-25T16:15:20.000Z","updated":"2021-05-28T04:56:17.274Z","comments":true,"path":"2019/11/26/yuque/Hexo博客系列-1：搭建GithubPages + Hexo博客/","link":"","permalink":"https://shiyutian.com/2019/11/26/yuque/Hexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97-1%EF%BC%9A%E6%90%AD%E5%BB%BAGithubPages%20+%20Hexo%E5%8D%9A%E5%AE%A2/","excerpt":"前言：Hexo 是一款基于 Node.js 的简单轻量静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Coding 上，是搭建博客的首选框架。","text":"前言：Hexo 是一款基于 Node.js 的简单轻量静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Coding 上，是搭建博客的首选框架。 Hexo 博客搭建 安装 Git mac 安装 brew install git windows 安装 git 下载 安装完成后验证 git --version 安装 nodejs mac 安装 brew install node windows 安装 nodejs 地址，选择 LTS 版本 安装完成后验证 node -vnpm -v 安装 hexo 安装 hexo npm install -g hexo-cli 验证 hexo hexo -v 创建 Hexo 博客项目 hexo init myblogcd myblognpm install 完成后目录结构如下： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 运行 Hexo 项目 hexo ghexo server hexo 的服务，在浏览器输入 localhost:4000 就可以看到你生成的博客了 配置 GithubPages 主页 注册 github 账户 首先，你先要有一个 GitHub 账户，去注册一个吧。 注册完登录后，在 GitHub.com 中看到一个 New repository，新建仓库[yourname].github.io 点击 create repository。 git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;# 检查git config user.namegit config user.email 生成 SSH 执行如下命令，一直回车即可 ssh-keygen -t rsa -C &quot;youremail&quot; ssh，简单来讲，就是一个秘钥，其中，id_rsa 是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub 是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接 GitHub 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git 上传你的文件到 GitHub 上。 上传公钥到 GitHub 在 mac 中找到~/.ssh/id_rsa.pub 在 GitHub 的 Setting &gt; SSH and GPG keys 中，找到 SSH keys 的设置选项，点击 New SSH key 把你的 id_rsa.pub 里面的信息复制进去。 验证 SSH ssh -T git@github.com 部署 hexo 到 GitHub 修改配置 修改_config.yml配置如下 deploy: type: git repo: git@github.com:YourgithubName/YourgithubName.github.io.git branch: master 安装插件 npm install hexo-deployer-git --save 执行同步 hexo cleanhexo generatehexo deploy 设置自己的域名 默认访问地址如下 [YourgithubName].github.io 配置 GITHUB 为私有域名 在如下配置页面设置私有域名为你自己购买的域名 如:blog.heidi.pub 设置 CNAME 在域名后端将 blog.heidi.pub 解析为 [YourgithubName].github.io","raw":null,"content":null,"categories":[{"name":"博客","slug":"博客","permalink":"https://shiyutian.com/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"https://shiyutian.com/tags/Hexo%E7%B3%BB%E5%88%97/"},{"name":"教程","slug":"教程","permalink":"https://shiyutian.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Hexo博客系列-2：增加coding发布源，绑定自己的域名，增加https访问","slug":"yuque/Hexo博客系列-2：增加coding发布源，绑定自己的域名，增加https访问","date":"2019-11-25T16:15:20.000Z","updated":"2021-05-28T04:56:17.230Z","comments":true,"path":"2019/11/26/yuque/Hexo博客系列-2：增加coding发布源，绑定自己的域名，增加https访问/","link":"","permalink":"https://shiyutian.com/2019/11/26/yuque/Hexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97-2%EF%BC%9A%E5%A2%9E%E5%8A%A0coding%E5%8F%91%E5%B8%83%E6%BA%90%EF%BC%8C%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%A2%9E%E5%8A%A0https%E8%AE%BF%E9%97%AE/","excerpt":"前言：Hexo 是一款基于 Node.js 的简单轻量静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Coding 上，是搭建博客的首选框架。","text":"前言：Hexo 是一款基于 Node.js 的简单轻量静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Coding 上，是搭建博客的首选框架。 增加 coding 发布源 首先，去官网登陆你的 coding 账号，没有就注册一个，然后完善个人信息，。然后新建一个 repository，项目名称就填你的用户名，选择私有，然后创建项目。 创建项目 项目地址格式是 你的域名.coding.me 选择静态页面服务 企业版界面如下 配置 SSH 公钥 同 Github 首先点击右上角的头像-个人设置-SSH 公钥-新增公匙-输入你自己的 SSH 公匙-永久有效(推荐)-确定即可。 如果你之前部署过 github 用同一个公匙是没问题的。 配置 hexo 的_config.yml 实例如下 # Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: git@github.com:DevinShi2019/DevinShi2019.github.io.git,master coding: git@e.coding.net:sdf-system/blog-hexo.git,master 配置.travis/ssh_config Host github.com HostName github.com User git StrictHostKeyChecking no IdentityFile ~/.ssh/id_rsa IdentitiesOnly yes# 我这里使用的企业版，所以域名是e.coding.netHost e.coding.net HostName e.coding.net User git StrictHostKeyChecking no IdentityFile ~/.ssh/id_rsa IdentitiesOnly yes 发布 配置完之后，提交代码到 master 分支即可 绑定自己的域名并申请 Https 域名 CNAME 配置 配置自由域名如 blog.sdf.heidi.pub CNAME 境外 devinshi2019.github.io blog.sdf.heidi.pub CNAME 默认 zfr5mu.coding-pages.com Github 配置 如需要 https，需要勾上此选项，等待大概 1 天左右 Coding 配置 此处配置，并点击右侧操作的申请证书，完成之后如下 如需要 https，需要先禁用掉 blog.sdf.heidi.pub 指向 github 的解析，等待 1 个小时左右生效后，再启用","raw":null,"content":null,"categories":[{"name":"博客","slug":"博客","permalink":"https://shiyutian.com/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"https://shiyutian.com/tags/Hexo%E7%B3%BB%E5%88%97/"},{"name":"教程","slug":"教程","permalink":"https://shiyutian.com/tags/%E6%95%99%E7%A8%8B/"}]}]}